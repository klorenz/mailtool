// Generated by CoffeeScript 1.9.1
(function() {
  var CSON, MailTool, MailToolMissingFieldError, doT, extend, isUpperCase, keys, markdown, nodemailer, ref,
    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CSON = require('season');

  markdown = require('nodemailer-markdown').markdown;

  nodemailer = require('nodemailer');

  doT = require('dot');

  ref = require('underscore'), keys = ref.keys, extend = ref.extend;

  isUpperCase = function(s) {
    return s.toUpperCase() === s;
  };

  MailToolMissingFieldError = (function(superClass) {
    extend1(MailToolMissingFieldError, superClass);

    function MailToolMissingFieldError(field1) {
      this.field = field1;
      MailToolMissingFieldError.__super__.constructor.call(this, "Missing field '" + this.field + "' in envelope");
    }

    return MailToolMissingFieldError;

  })(Error);

  MailTool = (function() {
    function MailTool(config, transport) {
      var k, ref1, v;
      if (typeof config === "string") {
        this.config = CSON.readFileSync(config);
      } else {
        this.config = config;
      }
      if (!('default' in this.config)) {
        ref1 = this.config;
        for (k in ref1) {
          v = ref1[k];
          this.config["default"] = v;
          break;
        }
      }
      if (typeof this.config["default"] === "string") {
        this.config["default"] = this.config[this.config["default"]];
      }
      this.transport = transport;
      this.required = ['subject', 'to'];
    }

    MailTool.prototype.saveConfig = function(fileName) {
      if (!fileName) {
        fileName = this.config.configFileName;
      }
      return this.writeConfig(fileName, this.config);
    };

    MailTool.prototype.loadConfig = function(fileName) {
      return this.config = this.readConfig(fileName);
    };

    MailTool.prototype.readConfig = function(fileName) {
      var config;
      config = CSON.readFileSync(fileName);
      config.configFileName = fileName;
      return config;
    };

    MailTool.prototype.writeConfig = function(fileName, config) {
      var configFileName;
      configFileName = null;
      if ('configFileName' in config) {
        configFileName = config.configFileName;
        delete config.configFileName;
      }
      CSON.writeFileSync(fileName, config);
      if (configFileName != null) {
        return config.configFileName = configFileName;
      }
    };

    MailTool.prototype.applyTemplates = function(options) {
      var currentTemplateCount, hasUndefined, i, key, len, ref1, results, templateData, templates, value;
      templates = {};
      templateData = extend({}, options.data);
      for (key in options) {
        value = options[key];
        if (!value.match(/\{\{/)) {
          if (!(key in templateData)) {
            templateData[key] = value;
          }
        } else {
          templates[key] = {
            source: value,
            template: doT.template(value.replace(/\{\{\w+\}\}/, function(m) {
              return "{{=it." + m.substring(2);
            })),
            hasUndefined: /undefined/.test(value)
          };
        }
      }
      currentTemplateCount = templates.length;
      results = [];
      while (keys(templates).length) {
        ref1 = keys(templates);
        for (i = 0, len = ref1.length; i < len; i++) {
          key = ref1[i];
          value = templates[key].template(templateData);
          hasUndefined = /undefined/.test(value);
          if (!hasUndefined || (hasUndefined && templates[key].hasUndefined)) {
            delete templates[key];
            templateData[key] = value;
            options[key] = value;
          }
        }
        if (currentTemplateCount === templates.length) {
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    MailTool.prototype.sendMail = function(config, callback) {
      var cfgName, data, field, i, j, key, l, len, len1, len2, mailOpts, name, opts, ref1, ref2, ref3, templateData, toolOpts, transport, value;
      cfgName = config.config || config.name || 'default';
      mailOpts = {};
      toolOpts = {};
      data = {};
      templateData = extend(this.config[cfgName].data || {}, config.data || {});
      ref1 = [this.config[cfgName], config];
      for (i = 0, len = ref1.length; i < len; i++) {
        opts = ref1[i];
        for (key in opts) {
          value = opts[key];
          data[key] = value;
        }
      }
      data.data = templateData;
      ref2 = this.required;
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        field = ref2[j];
        if (!(field in data)) {
          return process.nextTick(function() {
            return callback(new MailToolMissingFieldError(field));
          });
        }
      }
      if ('signature' in data) {
        if (typeof data.signature === "string") {
          if (data.text) {
            data.text += "\n--\n" + data.signature;
          } else if (data.markdown) {
            data.markdown += "\n--\n" + data.signature;
          }
        } else if (data.signature) {
          ref3 = ['html', 'text', 'markdown'];
          for (l = 0, len2 = ref3.length; l < len2; l++) {
            name = ref3[l];
            if (name in data.signature) {
              data[name] += data.signature[name];
            }
          }
        }
      }
      if (!this.transport) {
        transport = require("nodemailer-smtp-transport");
      } else if (this.transport.sendMail) {
        transport = this.transport;
      } else {
        transport = nodemailer.createTransport(this.transport(data.transport));
      }
      transport.use('compile', markdown(data));
      return transport.sendMail(data, callback);
    };

    return MailTool;

  })();

  module.exports = {
    MailTool: MailTool
  };

}).call(this);
